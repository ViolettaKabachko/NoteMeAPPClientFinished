{"ast":null,"code":"export const storeTokens = (access, refresh) => {\n  localStorage.setItem(\"access_token\", access);\n  localStorage.setItem(\"refresh_token\", refresh);\n};\nexport const redirect = path => {\n  window.location.href = path;\n};\nexport const getDataByToken = async route => {\n  const opts = {\n    credentials: \"include\",\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('access_token')}`\n    }\n  };\n  const res = await fetch(route, opts);\n  if (res.status !== 200) {\n    refreshToken();\n  }\n  let data = await res.json();\n  return {\n    data: data,\n    status: res.status\n  };\n};\nexport const sendData = async (url, data, type) => {\n  const opts = {\n    credentials: \"include\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": typeof data !== FormData ? \"application/json\" : \"multipart/form-data\",\n      \"Authorization\": `Bearer ${localStorage.getItem('access_token')}`\n    },\n    body: typeof data !== FormData ? JSON.stringify(data) : data\n  };\n  const response = await fetch(url, opts);\n  let res = await response.json();\n  if (type === 'login' && response.status === 200) storeTokens(res.access_token, res.refresh_token);else {\n    if (response.status !== 200) {\n      refreshToken();\n    }\n  }\n  return {\n    data: res,\n    status: response.status\n  };\n};\n\n// export const updateInfo = async (newData, url) => {\n//     const opts = {\n//         credentials: 'include',\n//         headers: {\n//             Authorization: `Bearer ${localStorage.getItem('access_token')}`,\n//             \"Access-Control-Allow-Origin\": \"*\",\n//             \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, UPDATE, DELETE\"\n//         },\n//         method: 'UPDATE',\n//         body: JSON.stringify(newData)\n//     }\n//     const response = await fetch(url, opts)\n//     let res = await response.json()\n//     if (response.status !== 200) {\n//         refreshToken()\n//     }\n//     return {data: res, status: response.status}\n// }\n\nexport const refreshToken = async () => {\n  const opts = {\n    credentials: \"include\",\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('refresh_token')}`\n    }\n  };\n  let res = await fetch('http://127.0.0.1:5000/refresh', opts);\n  if (res.status === 200) {\n    let res_json = await res.json();\n    storeTokens(res_json.access_token, res_json.refresh_token);\n  } else {\n    localStorage.clear();\n    redirect('/login');\n  }\n};","map":{"version":3,"names":["storeTokens","access","refresh","localStorage","setItem","redirect","path","window","location","href","getDataByToken","route","opts","credentials","headers","Authorization","getItem","res","fetch","status","refreshToken","data","json","sendData","url","type","method","FormData","body","JSON","stringify","response","access_token","refresh_token","res_json","clear"],"sources":["C:/Users/miham/Desktop/new_proj/React/new-app/src/fetch.js"],"sourcesContent":["export const storeTokens = (access, refresh) => {\r\n    localStorage.setItem(\"access_token\", access)\r\n    localStorage.setItem(\"refresh_token\", refresh)\r\n    \r\n}\r\n\r\nexport const redirect = (path) => {\r\n    window.location.href = path\r\n  }\r\n\r\nexport const getDataByToken = async (route) => {\r\n    const opts = {\r\n        credentials: \"include\",\r\n        headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n        },\r\n    }\r\n    const res = await fetch(route, opts)\r\n    if (res.status !== 200) {\r\n        refreshToken()\r\n    }\r\n    let data = await res.json()\r\n    return {data: data, status: res.status}\r\n}\r\n\r\nexport const sendData = async (url, data, type) => {\r\n    const opts = {\r\n        credentials: \"include\",\r\n        method: \"POST\",\r\n        headers: {\r\n        \"Content-Type\": typeof(data) !== FormData ? \"application/json\": \"multipart/form-data\",\r\n        \"Authorization\": `Bearer ${localStorage.getItem('access_token')}`\r\n        },\r\n        body: typeof(data) !== FormData ? JSON.stringify(data): data\r\n    }       \r\n    const response = await fetch(url, opts)\r\n    let res = await response.json()\r\n    if (type === 'login' && response.status === 200)\r\n        storeTokens(res.access_token, res.refresh_token)\r\n    else {\r\n        if (response.status !== 200) {\r\n            refreshToken()\r\n        }\r\n    }\r\n    return {data: res, status: response.status}\r\n}\r\n\r\n// export const updateInfo = async (newData, url) => {\r\n//     const opts = {\r\n//         credentials: 'include',\r\n//         headers: {\r\n//             Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n//             \"Access-Control-Allow-Origin\": \"*\",\r\n//             \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, UPDATE, DELETE\"\r\n//         },\r\n//         method: 'UPDATE',\r\n//         body: JSON.stringify(newData)\r\n//     }\r\n//     const response = await fetch(url, opts)\r\n//     let res = await response.json()\r\n//     if (response.status !== 200) {\r\n//         refreshToken()\r\n//     }\r\n//     return {data: res, status: response.status}\r\n// }\r\n\r\nexport const refreshToken = async () => {\r\n    const opts = {\r\n        credentials: \"include\",\r\n        headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('refresh_token')}`\r\n        }\r\n    }\r\n    let res = await fetch('http://127.0.0.1:5000/refresh', opts)\r\n    if (res.status === 200) {\r\n        let res_json = await res.json()\r\n        storeTokens(res_json.access_token, res_json.refresh_token)\r\n    }\r\n    else {\r\n        localStorage.clear()\r\n        redirect('/login')\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}